[workspace]
members = [
    "worker",
    "worker-build",
    "worker-macros",
    "worker-sandbox",
    "worker-sys",
    "examples/*",
]
exclude = ["examples/coredump"]
resolver = "2"

[workspace.dependencies]
async-trait = "0.1.74"
chrono = { version = "0.4.31", default-features = false, features = [
    "wasmbind",
] }
chrono-tz = { version = "0.8.4", default-features = false }
futures-channel = "0.3.28"
futures-util = { version = "0.3.28", default-features = false }
http = "1.0.0"
js-sys = "0.3.66"
wasm-bindgen = "0.2.89"
wasm-bindgen-cli-support = "0.2.89"
wasm-bindgen-futures = "0.4.39"
wasm-bindgen-macro-support = "0.2.89"
wasm-bindgen-test = "0.3.39"
wasm-streams = "0.4.0"
worker = { path = "worker" }

[profile.release]
# rustc supports two "optimize for size" levels:  opt-level = "s" and "z". 
# These names were inherited from clang / LLVM and are not too descriptive
# but "z" is meant to give the idea that it produces smaller binaries than "s".
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimize-for-size
opt-level = "z"

# by compiling as a single codegen unit (i.e. not in parallel),
# it's possible to reduce size even further at the expense of
# compilation time
codegen-units = 1

# by enabling link-time optimization, we can reduce size even further
# by telling cargo to optimize at the link stage (in addition to the
# normal optimizations during the compilation stage)
lto = true

# by overriding our dependencies' compilation settings, we can further optimize for size
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimizing-dependencies
[profile.release.package."*"]
codegen-units = 1
opt-level = "z"
